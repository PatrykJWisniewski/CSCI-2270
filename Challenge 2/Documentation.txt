For this problem I grabbed all the code from Assignment 8 and then modified the wordItem struct
to have a left and right pointer to children. After doing this I then made it so that a tree is
created when the printTopN function is called. It does this by travesing the entire hash table
and adding each element to BST.

I used the Insert function from my Challenge 1 code but changed it so that the BST is in reverse
making the larger numbers go too the left. I then created a PrintInOrder function and defined it
in the class. This allows me to access a new variable that I made called wordsPrinted. This keeps
track of how many words have been printed and acts as a base case for the recursion with printing
the top n words. In the recusrsion it first checks if the base case has been meet before printing
in order to only print the top N words.

The time complextiy of this program is O(n) since it has to add all the elements from the hash
table to the BST. Adding each element may take shorter or longer depending on its position in
the BST, but you still have to add too the tree once for each element in the BST, that is why I
think that it would be O(n).

For testing I tried when n is 0 and when n is not 0. 
